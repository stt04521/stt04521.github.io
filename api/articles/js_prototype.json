{"title":"javascript  原型 原型链","slug":"js_prototype","date":"2017-07-08T05:25:55.000Z","updated":"2017-07-08T16:38:34.000Z","comments":true,"excerpt":"<p>深入理解 javascript 底层 原型概念<br>","content":"<p>深入理解 javascript 底层 原型概念<br><a id=\"more\"></a></p>\n<h5 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h5><p>原型是  javascript 中比较难理解的概念，原型相关的属性也比较多。面试过很多前端，但是对这些概念还是难以说清。故整理这篇文章，希望通过这篇文章能清楚的认识到原型。</p>\n<h5 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h5><p>我们创建的每一个函数都有一个 prototype (原型)属性，这个属性是一个指针，指向一个对象。这个对象就是我们所说的原型对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。通俗点讲原型对象就是内存中为其他对象提供共享属性和方法的对象，可以理解为 prototype 就是通过调用构造函数创建的对象实例的原型对象。</p>\n<p>简单的讲解一下调用构造函数创建的对象实例 new 的过程：</p>\n<pre><code>function Gf(){\n\n    };\n      Gf.prototype.name = name;\n    Gf.prototype.bar = bar;\n    Gf.prototype.sayWhat = function() {\n     alert(this.name + &quot;said:love you forever&quot;);\n         }\n\nvar gf1 = new Gf();\n\n//var obj  = {};\n//obj.__proto__ = Gf.prototype;\n//Gf.call(obj);\n//1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n //2、属性和方法被加入到 this 引用的对象中。\n//3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n//简单的说就是改变this指向，继承原型，返回新对象\n</code></pre><p>通过 new 的过程我们可以发现，obj 有一个隐性属性 [[prototype]] 指向它构造函数的原型对象(在firefox,safari,chrome浏览器中表现为私有属性proto)。一般默认情况下，所有原型对象都会自动获取一个 constructor 属性，这个属性指向 prototype 属性所在的函数。</p>\n<p>通过一个示意图弄清它们之间关系：</p>\n<p><img src=\"http://osrd7dt4l.bkt.clouddn.com/17-7-9/36128636.jpg\" alt=\"\"></p>\n<p>构造函数Gf有一个prototype属性，指向一个原型对象。这个原型对象上包含，通过Gf创建出来的对象实例之间能共享的方法和属性，包含一个constructor属性指向Gf，gf1和gf2都含有一个内部属性指向原型对象</p>\n","thumbnail":"https://i.pximg.net/c/600x600/img-master/img/2017/07/06/00/13/47/63723851_p0_master1200.jpg","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"javascript","path":"api/tags/javascript.json"}]}